(load "package://matsuura_hand/euslisp/mhand_r-interface.l")
(load "package://matsuura_hand/euslisp/mhand_l-interface.l")

(defun matsuura-hand-init (&key (realp t))
  (setq *rhand* (instance matsuura_hand_r-robot :init))
  (setq *lhand* (instance matsuura_hand_l-robot :init))
  (when realp
    (setq *rhand-ri* (instance* matsuura_hand_r-interface :init nil))
    (setq *lhand-ri* (instance* matsuura_hand_l-interface :init nil))
    )
  )

;;lock each finger in each angle
(defun finger-lock (arm &key (lock-angles #f(90 90)) (effort #f(1 1 1 1 1 1)) (send? nil)) ;; (finger "both"))
  (if (equal (length lock-angles) 1)
      (progn
        (format t "set :lock-angles like #f(90 90)~%")
        (return-from finger-lock nil)))
  (if (and (memq (elt lock-angles 0) (list 60.0 90.0 120.0 150.0)) (memq (elt lock-angles 1) (list 60.0 90.0 120.0 150.0)))
      (progn
        (when (or (eq arm :larm) (eq arm :arms))
          (when (boundp '*lhand-ri*)
            (format t "larm lock motion~%")
            (setq lock-motion '()
                  lhand-ri-angle (send *lhand-ri* :state :angle-vector))
            (replace lhand-ri-angle (float-vector (* -1 (- (elt lock-angle 0) 20))) :start1 2)
            (replace lhand-ri-angle (float-vector (* -1 (- (elt lock-angle 1) 20))) :start1 4)
            (replace lhand-ri-angle #f(0.0) :start1 5)
            (setq lock-motion (list-insert (copy-seq lhand-ri-angle) 3 lock-motion))

            (replace lhand-ri-angle #f(-14.0) :start1 5)
            (setq lock-motion (list-insert (copy-seq lhand-ri-angle) 3 lock-motion))

            (replace lhand-ri-angle (float-vector (* -1 (- (elt lock-angle 0) 30))) :start1 2)
            (replace lhand-ri-angle (float-vector (* -1 (- (elt lock-angle 1) 30))) :start1 4)
            (setq lock-motion (list-insert (copy-seq lhand-ri-angle) 3 lock-motion))

            (dotimes (i 3)
              (send *lhand* :angle-vector (pop lock-motion))
              (if send?
                  (progn
                    (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
                    (send *lhand-ri* :wait-interpolation)))
              (unix:usleep 2000))))

        (when (or (eq arm :rarm) (eq arm :arms))
          (when (boundp '*rhand-ri*)
            (format t "rarm lock motion~%")
            (setq lock-motion '()
                  rhand-ri-angle (send *rhand-ri* :state :angle-vector))
            (replace rhand-ri-angle (float-vector (* +1 (- (elt lock-angle 0) 20))) :start1 2)
            (replace rhand-ri-angle (float-vector (* +1 (- (elt lock-angle 1) 20))) :start1 4)
            (replace rhand-ri-angle #f(0.0) :start1 5)
            (setq lock-motion (list-insert (copy-seq rhand-ri-angle) 3 lock-motion))

            (replace rhand-ri-angle #f(14.0) :start1 5)
            (setq lock-motion (list-insert (copy-seq rhand-ri-angle) 3 lock-motion))

            (replace rhand-ri-angle (float-vector (* +1 (- (elt lock-angle 0) 30))) :start1 2)
            (replace rhand-ri-angle (float-vector (* +1 (- (elt lock-angle 1) 30))) :start1 4)
            (setq lock-motion (list-insert (copy-seq rhand-ri-angle) 3 lock-motion))

            (dotimes (i 3)
              (send *rhand* :angle-vector (pop lock-motion))
              (if send?
                  (progn
                    (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
                    (send *rhand-ri* :wait-interpolation)))
              (unix:usleep 2000)))))
    (format t "please set lock-angle in 60 90 120 150~%")))

(defun hand-grasp (arm &key (effort #(1 1 1)))
  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 95 30))
      (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
      (send *rhand-ri* :wait-interpolation)
      )
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 95 100))
      (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 95 -30))
      (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
      (send *lhand-ri* :wait-interpolation)
      )
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 95 -100))
      (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-grasp-tight (arm &key (effort #(1 1 1)))
  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 100 30))
      ;;(send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
      (send *rhand-ri* :angle-vector-with-effort #f(-90 100 30) effort 500)
      (send *rhand-ri* :wait-interpolation)
      )
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 100 100))
      ;;(send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
      (send *rhand-ri* :angle-vector-with-effort #f(-90 100 100) effort 500)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 110 -30))
      (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
      (send *lhand-ri* :wait-interpolation)
      )
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 110 -100))
      (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-open (arm &key (effort #(1 1 1)))
  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 90 30))
      (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
      (send *rhand-ri* :wait-interpolation)
      )
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 0 30))
      (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 90 -30))
      (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
      (send *lhand-ri* :wait-interpolation)
      )
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 0 -30))
      (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-hook (arm &key (effort #(1 1 1)))
  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 0 30))
      (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 1000)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 0 -30))
      (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 1000)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-hook2 (arm &key (effort #(1 1 1)))
  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(0 0 60))
      (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 1000)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(0 0 -60))
      (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 1000)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-reset (arm &key (effort #(1 1 1)))
  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(0 0 0))
      (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 1000)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(0 0 0))
      (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 1000)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-ring (arm &key (effort #(1 1 1)))
  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 60 90))
      (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 1000)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 60 -90))
      (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 1000)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )
