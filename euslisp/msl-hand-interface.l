(load "package://msl_hand_controller/euslisp/msl_hand_r-interface.l")
(load "package://msl_hand_controller/euslisp/msl_hand_l-interface.l")

(defun msl-hand-init (&key (realp t))
  (setq *rhand* (instance msl_hand_r-robot :init))
  (setq *lhand* (instance msl_hand_l-robot :init))
  (send *lhand* :angle-vector #f(0 90 0 0 0 0))
  (send *rhand* :angle-vector #f(0 90 0 0 0 0))
  (when realp
    (setq *rhand-ri* (instance* msl_hand_r-interface :init nil))
    (setq *lhand-ri* (instance* msl_hand_l-interface :init nil))
    (reset-pose :rarm :send? t)
    (reset-pose :larm :send? t)))

(defun reset-pose(arm &key (effort #f(0.2 0.2 0.2 0.2 0.2 0.1)) (send? nil))
  (format t "reset-pose")
  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(0 90 0 0 0 0))
      (if send?
          (progn
            (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 400)))))
  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(0 90 0 0 0 0))
      (if send?
          (progn
            (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 400))))))

(defun grasp-pose(arm &key (effort #f(0.2 0.2 0.2 0.2 0.2 0.1)) (send? nil))
  (format t "grasp-pose")
  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 0 0 0 0 0))
      (if send?
          (progn
            (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 400)))))
  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 0 0 0 0 0))
      (if send?
          (progn
            (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 400))))))


;;lock each finger in each angle
(defun lock-finger (arm &key (lock-angles #f(90 90)) (effort #f(0.2 0.2 0.2 0.2 0.2 0.1)) (send? nil))
  (release-finger :arm :effort effort :send? send?)
  (if (equal (length lock-angles) 1)
      (progn
        (format t "set :lock-angles like #f(90 90)~%")
        (return-from finger-lock nil)))
  (if (not (and (memq (elt lock-angles 0) (list 0.0 60.0 90.0 120.0)) (memq (elt lock-angles 1) (list 0.0 60.0 90.0 120.0))))
      (progn
        (format t "please set lock-angle in 0 60 90 120 ~%")
        (return-from finger-lock nil)))

  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (format t "rarm lock motion~%")
      (setq lock-motion '()
            rhand-ri-angle (send *rhand-ri* :state :angle-vector))

      ;;reset finger angle
      (replace rhand-ri-angle (float-vector (* +1 120)) :start1 2)
      (replace rhand-ri-angle #f(0.0) :start1 3)
      (replace rhand-ri-angle (float-vector (* +1 120)) :start1 4)
      (replace rhand-ri-angle #f(0.0) :start1 5)
      (setq lock-motion (list-insert (copy-seq rhand-ri-angle) 3 lock-motion))
      ;; send index, middle joint angle (lock-angle-20)
      (replace rhand-ri-angle (float-vector (* +1 (if (equal (elt lock-angles 0) 0) 0 (- (elt lock-angles 0) 20)))) :start1 2)
      (replace rhand-ri-angle (float-vector (* +1 (if (equal (elt lock-angles 1) 0) 0 (- (elt lock-angles 1) 20)))) :start1 4)
      (replace rhand-ri-angle #f(0.0) :start1 5)
      (setq lock-motion (list-insert (copy-seq rhand-ri-angle) 3 lock-motion))
      ;;send lock-joint angle 14
      (replace rhand-ri-angle (if (equal lock-angles #f(0.0 0.0)) #f(0.0) #f(14.0)) :start1 5)
      (setq lock-motion (list-insert (copy-seq rhand-ri-angle) 3 lock-motion))
      ;; send index, middle joint angle (lock-angle-30)
      (replace rhand-ri-angle (float-vector (* +1 (if (equal (elt lock-angles 0) 0) 0 (- (elt lock-angles 0) 30)))) :start1 2)
      (replace rhand-ri-angle (float-vector (* +1 (if (equal (elt lock-angles 1) 0) 0 (- (elt lock-angles 1) 30)))) :start1 4)
      (setq lock-motion (list-insert (copy-seq rhand-ri-angle) 3 lock-motion))

      (dotimes (i (length lock-motion))
        (send *rhand* :angle-vector (pop lock-motion))
        (if send?
            (progn
              (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 400)
              (send *rhand-ri* :wait-interpolation)))
        (unix:usleep 2000))))

  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (format t "larm lock motion~%")
      (setq lock-motion '()
            lhand-ri-angle (send *lhand-ri* :state :angle-vector))
      ;;reset finger angle
      (replace lhand-ri-angle (float-vector (* -1 120)) :start1 2)
      (replace lhand-ri-angle #f(0.0) :start1 3)
      (replace lhand-ri-angle (float-vector (* -1 120)) :start1 4)
      (replace lhand-ri-angle #f(0.0) :start1 5)
      (setq lock-motion (list-insert (copy-seq lhand-ri-angle) 3 lock-motion))
      ;; send index, middle joint angle (lock-angle+20)
      (replace lhand-ri-angle (float-vector (* -1 (if (equal (elt lock-angles 0) 0) 0 (- (elt lock-angles 0) 20)))) :start1 2)
      (replace lhand-ri-angle (float-vector (* -1 (if (equal (elt lock-angles 1) 0) 0 (- (elt lock-angles 1) 20)))) :start1 4)
      (replace lhand-ri-angle #f(0.0) :start1 5)
      (setq lock-motion (list-insert (copy-seq lhand-ri-angle) 3 lock-motion))
      ;;send lock-joint angle 14
      (replace lhand-ri-angle (if (equal lock-angles #f(0.0 0.0)) #f(0.0) #f(-14.0)) :start1 5)
      (setq lock-motion (list-insert (copy-seq lhand-ri-angle) 3 lock-motion))
      ;; send index, middle joint angle (lock-angle+30)
      (replace lhand-ri-angle (float-vector (* -1 (if (equal (elt lock-angles 0) 0) 0 (- (elt lock-angles 0) 30)))) :start1 2)
      (replace lhand-ri-angle (float-vector (* -1 (if (equal (elt lock-angles 1) 0) 0 (- (elt lock-angles 1) 30)))) :start1 4)
      (setq lock-motion (list-insert (copy-seq lhand-ri-angle) 3 lock-motion))

      (dotimes (i (length lock-motion))
        (send *lhand* :angle-vector (pop lock-motion))
        (if send?
            (progn
              (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 400)
              (send *lhand-ri* :wait-interpolation)))
        (unix:usleep 2000)))))

(defun release-finger(arm &key (effort #f(0.2 0.2 0.2 0.2 0.2 0.1)) (send? nil))
  (when (or (eq arm :rarm) (eq arm :arms))
    (when (boundp '*rhand-ri*)
      (format t "rarm release motion~%")
      (setq lock-motion '()
            rhand-ri-angle (send *rhand-ri* :state :angle-vector)
            rhand-ri-angle-save (copy-seq rhand-ri-angle))

      ;;reset finger angle
      (replace rhand-ri-angle (float-vector (* +1 120)) :start1 2)
      (replace rhand-ri-angle #f(0.0) :start1 3)
      (replace rhand-ri-angle (float-vector (* +1 120)) :start1 4)
      (replace rhand-ri-angle #f(0.0) :start1 5)
      (setq lock-motion (list-insert (copy-seq rhand-ri-angle) 3 lock-motion))

      ;; return saved angle
      (replace rhand-ri-angle (float-vector (elt  rhand-ri-angle-save 2))  :start1 2)
      (replace rhand-ri-angle (float-vector (elt  rhand-ri-angle-save 3)) :start1 3)
      (replace rhand-ri-angle (float-vector (elt  rhand-ri-angle-save 4)) :start1 4)
      (setq lock-motion (list-insert (copy-seq rhand-ri-angle) 3 lock-motion))

      (dotimes (i (length lock-motion))
        (send *rhand* :angle-vector (pop lock-motion))
        (if send?
            (progn
              (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 400)
              (send *rhand-ri* :wait-interpolation)))
        (unix:usleep 2000))))

  (when (or (eq arm :larm) (eq arm :arms))
    (when (boundp '*lhand-ri*)
      (format t "larm release motion~%")
      (setq lock-motion '()
            lhand-ri-angle (send *lhand-ri* :state :angle-vector)
            lhand-ri-angle-save (copy-seq lhand-ri-angle))
      ;;reset finger angle
      (replace lhand-ri-angle (float-vector (* -1 120)) :start1 2)
      (replace lhand-ri-angle #f(0.0) :start1 3)
      (replace lhand-ri-angle (float-vector (* -1 120)) :start1 4)
      (replace lhand-ri-angle #f(0.0) :start1 5)
      (setq lock-motion (list-insert (copy-seq lhand-ri-angle) 3 lock-motion))

      ;; return saved angle
      (replace lhand-ri-angle (float-vector (elt  lhand-ri-angle-save 2))  :start1 2)
      (replace lhand-ri-angle (float-vector (elt  lhand-ri-angle-save 3)) :start1 3)
      (replace lhand-ri-angle (float-vector (elt  lhand-ri-angle-save 4)) :start1 4)
      (setq lock-motion (list-insert (copy-seq lhand-ri-angle) 3 lock-motion))

      (dotimes (i (length lock-motion))
        (send *lhand* :angle-vector (pop lock-motion))
        (if send?
            (progn
              (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 400)
              (send *lhand-ri* :wait-interpolation)))
        (unix:usleep 2000)))))

(format t "~%(lock-finger :larm :lock-angles #f(60 60) :effort #f(0.2 0.2 0.2 0.2 0.2 0.1) :send? t)~%")
(format t "~%(release-finger :larm :effort #f(0.2 0.2 0.2 0.2 0.2 0.1) :send? t)~%")
(format t "~%reset-pose~%")
(format t "~%grasp-pose~%")
(format t "~%msl-hand-init~%")
;; (defun hand-grasp (arm &key (effort #(1 1 1)))
;;   (when (or (eq arm :rarm) (eq arm :arms))
;;     (when (boundp '*rhand-ri*)
;;       (send *rhand* :angle-vector #f(-90 95 30))
;;       (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
;;       (send *rhand-ri* :wait-interpolation)
;;       )
;;     (when (boundp '*rhand-ri*)
;;       (send *rhand* :angle-vector #f(-90 95 100))
;;       (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
;;       (send *rhand-ri* :wait-interpolation)
;;       )
;;     )
;;   (when (or (eq arm :larm) (eq arm :arms))
;;     (when (boundp '*lhand-ri*)
;;       (send *lhand* :angle-vector #f(90 95 -30))
;;       (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
;;       (send *lhand-ri* :wait-interpolation)
;;       )
;;     (when (boundp '*lhand-ri*)
;;       (send *lhand* :angle-vector #f(90 95 -100))
;;       (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
;;       (send *lhand-ri* :wait-interpolation)
;;       )
;;     )
;;   )

;; (defun hand-grasp-tight (arm &key (effort #(1 1 1)))
;;   (when (or (eq arm :rarm) (eq arm :arms))
;;     (when (boundp '*rhand-ri*)
;;       (send *rhand* :angle-vector #f(-90 100 30))
;;       ;;(send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
;;       (send *rhand-ri* :angle-vector-with-effort #f(-90 100 30) effort 500)
;;       (send *rhand-ri* :wait-interpolation)
;;       )
;;     (when (boundp '*rhand-ri*)
;;       (send *rhand* :angle-vector #f(-90 100 100))
;;       ;;(send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
;;       (send *rhand-ri* :angle-vector-with-effort #f(-90 100 100) effort 500)
;;       (send *rhand-ri* :wait-interpolation)
;;       )
;;     )
;;   (when (or (eq arm :larm) (eq arm :arms))
;;     (when (boundp '*lhand-ri*)
;;       (send *lhand* :angle-vector #f(90 110 -30))
;;       (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
;;       (send *lhand-ri* :wait-interpolation)
;;       )
;;     (when (boundp '*lhand-ri*)
;;       (send *lhand* :angle-vector #f(90 110 -100))
;;       (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
;;       (send *lhand-ri* :wait-interpolation)
;;       )
;;     )
;;   )

;; (defun hand-open (arm &key (effort #(1 1 1)))
;;   (when (or (eq arm :rarm) (eq arm :arms))
;;     (when (boundp '*rhand-ri*)
;;       (send *rhand* :angle-vector #f(-90 90 30))
;;       (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
;;       (send *rhand-ri* :wait-interpolation)
;;       )
;;     (when (boundp '*rhand-ri*)
;;       (send *rhand* :angle-vector #f(-90 0 30))
;;       (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 500)
;;       (send *rhand-ri* :wait-interpolation)
;;       )
;;     )
;;   (when (or (eq arm :larm) (eq arm :arms))
;;     (when (boundp '*lhand-ri*)
;;       (send *lhand* :angle-vector #f(90 90 -30))
;;       (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
;;       (send *lhand-ri* :wait-interpolation)
;;       )
;;     (when (boundp '*lhand-ri*)
;;       (send *lhand* :angle-vector #f(90 0 -30))
;;       (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 500)
;;       (send *lhand-ri* :wait-interpolation)
;;       )
;;     )
;;   )

;; (defun hand-hook (arm &key (effort #(1 1 1)))
;;   (when (or (eq arm :rarm) (eq arm :arms))
;;     (when (boundp '*rhand-ri*)
;;       (send *rhand* :angle-vector #f(-90 0 30))
;;       (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 1000)
;;       (send *rhand-ri* :wait-interpolation)
;;       )
;;     )
;;   (when (or (eq arm :larm) (eq arm :arms))
;;     (when (boundp '*lhand-ri*)
;;       (send *lhand* :angle-vector #f(90 0 -30))
;;       (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 1000)
;;       (send *lhand-ri* :wait-interpolation)
;;       )
;;     )
;;   )

;; (defun hand-hook2 (arm &key (effort #(1 1 1)))
;;   (when (or (eq arm :rarm) (eq arm :arms))
;;     (when (boundp '*rhand-ri*)
;;       (send *rhand* :angle-vector #f(0 0 60))
;;       (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 1000)
;;       (send *rhand-ri* :wait-interpolation)
;;       )
;;     )
;;   (when (or (eq arm :larm) (eq arm :arms))
;;     (when (boundp '*lhand-ri*)
;;       (send *lhand* :angle-vector #f(0 0 -60))
;;       (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 1000)
;;       (send *lhand-ri* :wait-interpolation)
;;       )
;;     )
;;   )

;; (defun hand-reset (arm &key (effort #(1 1 1)))
;;   (when (or (eq arm :rarm) (eq arm :arms))
;;     (when (boundp '*rhand-ri*)
;;       (send *rhand* :angle-vector #f(0 0 0))
;;       (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 1000)
;;       (send *rhand-ri* :wait-interpolation)
;;       )
;;     )
;;   (when (or (eq arm :larm) (eq arm :arms))
;;     (when (boundp '*lhand-ri*)
;;       (send *lhand* :angle-vector #f(0 0 0))
;;       (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 1000)
;;       (send *lhand-ri* :wait-interpolation)
;;       )
;;     )
;;   )

;; (defun hand-ring (arm &key (effort #(1 1 1)))
;;   (when (or (eq arm :rarm) (eq arm :arms))
;;     (when (boundp '*rhand-ri*)
;;       (send *rhand* :angle-vector #f(-90 60 90))
;;       (send *rhand-ri* :angle-vector-with-effort (send *rhand* :angle-vector) effort 1000)
;;       (send *rhand-ri* :wait-interpolation)
;;       )
;;     )
;;   (when (or (eq arm :larm) (eq arm :arms))
;;     (when (boundp '*lhand-ri*)
;;       (send *lhand* :angle-vector #f(90 60 -90))
;;       (send *lhand-ri* :angle-vector-with-effort (send *lhand* :angle-vector) effort 1000)
;;       (send *lhand-ri* :wait-interpolation)
;;       )
;;     )
;;   )
